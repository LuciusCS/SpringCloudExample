server:
  port: 8004

spring:
  application:
    name: gateway-server  # 服务名称
  # 服务名称+开发环境+文件后缀名 = nacos配置的Data Id     gateway-dev.yaml
  profiles:
    active: mac   #开发环境
  main:
    web-application-type: reactive
    allow-bean-definition-overriding: true
  config:
    import:
      - optional:nacos:sentinel.yml
logging:
  level:
    com.alibaba.csp.sentinel: DEBUG  # Sentinel 的日志级别
    org.springframework.cloud: DEBUG  # Spring Cloud 相关的日志
    com.example: DEBUG  # 你自己应用的日志级别
---
spring:
  config:
    activate:
      on-profile: mac
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.22.180:8848
        group: spring-cloud-example-dev  # 需要在nacos 的namespace中创建，名字为spring-cloud-example-dev的Service
        namespace: cb500d3d-c86c-4230-8f7f-f5434caf711a   # 将spring-cloud-example-dev的namespace中id填入
        username: nacos
        password: nacos
      config:
        server-addr: 192.168.22.180:8848
        group: spring-cloud-example-dev  # 需要在nacos 的namespace中创建，名字为spring-cloud-example-dev的Service
        namespace: cb500d3d-c86c-4230-8f7f-f5434caf711a   # 将spring-cloud-example-dev的namespace中id填入
        username: nacos
        password: nacos
        import-check:
          enabled: false
#    sentinel:
#      transport:
#        dashboard: 127.0.0.1:8080
#        port: 8719
#      datasource:
#        gw-flow:
#          nacos:
#            server-addr: 192.168.22.180:8848
#            namespace: cb500d3d-c86c-4230-8f7f-f5434caf711a
#            group-id: spring-cloud-example-dev
#            data-id: gateway-flow-rules
#            rule-type: gw-flow
#            data-type: json
    # 让gateway从nacos中获取服务信息，如果没有这一个不会进行转发
    gateway:
      discovery:
        locator:
          enabled: true #使用服务发现路由
          lower-case-service-id: true
      routes:
        - id: authorization-resource-server    # 只是一个id 可以随意命名，但要与nacos中的流控规则名字对应起来
          uri: lb://authorization-server
          predicates:
            - Path=/oauth2/**
        - id: order-server
          uri: lb://order-server
          predicates:
            - Path=/order/**
        - id: seckill-server
          uri: lb://seckill-server             # 注册到Nacos中的服务名
          predicates:
            - Path=/api/**
#          filters:                   ✅ 结论：因为 Sentinel 网关限流已经自动集成到 Gateway 的过滤器链中，不需要手动配置 filters 条目
#            - SentinelGatewayFilter  # 关键！让 Gateway 请求进入 Sentinel 统计
#      routes: # 这里的 routes 会被 Nacos 动态更新，
#        - id: placeholder  # 使用placeholder相当于占位符
#          uri: lb://placeholder
#          predicates:
#            - Path=/placeholder/**
      #          server-addr: 192.168.19.121:8848
      #          locator:
      #              enabled: true
      #          group: QD
      #          namespace: bc73081d-7fca-422d-ba18-cfe2e62a2136
      # 让gateway从nacos中获取服务信息，如果没有这一个不会进行转发
  #      routes: # 路由数组路由 就是指当请求满足什么样的条件的时候转发到哪个微服务上]
  #          - id: product route # 当前路由发的标识要求唯一,默认是UUID
  #            #uri: http://localhost:8081 # 请求最终要被转发到的地址
  #            uri: 1b://service-product # lb 指的是负载均，后面跟的是具体微服务在nacos中的标识
  #            order: 1 # 路由的优先级，数字越代表路由的优先级越高
  #            predicates: # 断言(条件判断，返回值是boolean 转发请求要满足的条件)
  #              - Path=/product-serv/** # 当请求路径满足Path指定的规则时，此路由信息才会正常转发
  #            filters:  #过滤器(在请求传递过程中 对请求做一些手脚)
  #               stripPrefix=1 # 在请求转发之前去掉一层路径
  #

  #    如果有了cacos还需不需要断言工厂等信息
  # 用于配置数据库

#    gateway:
#      routes:   # 网关路由配置
#        - id: auth       # 自定义，需要保持唯一
#          # uri: http://127.0.0.1:8081  #路由的目标地址 http就是固定地址 一般不使用
#          uri: lb://auth-consume        # 路由的目标地址，  lb （loadbalance）就是负载均衡，后面跟服务名称
#          predicates:             # 路由断言，判断请求是否负荷路由规则的条件
#            - Path=/test/**      # 这个是按照路径匹配，只要以 /user/开头就符合要求  Path后面和等号之间不能有空格
#        - id: order-service
#          uri: lb:/order          # 路由的目标地址，  lb （loadbalance）就是负载均衡，后面跟服务名称
#          predicates: # 路由断言，判断请求是否负荷路由规则的条件
#            - Path=/order/**      # 这个是按照路径匹配，只要以 /user/开头就符合要求



